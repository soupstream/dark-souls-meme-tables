<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Open"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

{$lua}
-- workaround for cheat engine bug where it thinks tcc.lib is still loaded after
-- attaching to a different process, which can cause {$ccode} blocks to crash
if not getAddressSafe("tcc.lib") and getAddressSafe("__floatundidf") then
    unregisterSymbol("__floatundidf");
end
{$asm}


aobscanmodule(WorldChrManAOB, DARKSOULS.exe, 55 8b ec 83 e4 f0 a1 ? ? ? ? 33 c9)
label(WorldChrMan)
registersymbol(WorldChrMan)
[WorldChrManAOB+7]:
WorldChrMan:


alloc(myoffset, 0x1000, DARKSOULS.exe)
registersymbol(myoffset)
label(myoffset_exit)

// helper function for pointer chains
// void* __stdcall myoffset(void* address, int offset)
myoffset:
  push ecx
  push edx

  mov ecx, [esp+c]
  mov edx, [esp+10]
  xor eax, eax
  test ecx, ecx
  jz myoffset_exit
  mov eax, [ecx+edx]
myoffset_exit:
  pop edx
  pop ecx
  ret


alloc(EmpathyMultiplier, 4, DARKSOULS.exe)
registersymbol(EmpathyMultiplier)

EmpathyMultiplier:
  dd (float)1

 
[DISABLE]

unregistersymbol(WorldChrMan)

dealloc(myoffset)
unregistersymbol(myoffset)

dealloc(EmpathyMultiplier)
unregistersymbol(EmpathyMultiplier)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Always whiff"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(WhiffAob, DARKSOULS.exe, C1 E8 0C A8 01 75 1E)
registersymbol(WhiffAob)

WhiffAob+05:
  nop
  nop


[DISABLE]

WhiffAob+05:
  db 75 1E

unregistersymbol(WhiffAob)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Disable wall clinking"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(WallClinkAob, DARKSOULS.exe, 83 C1 6A 74 04 0F B6 34 19)
registersymbol(WallClinkAob)

WallClinkAob+05:
  xor esi, esi
  nop
  nop


[DISABLE]

WallClinkAob+05:
  db 0F B6 34 19

unregistersymbol(WallClinkAob)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Disco undead"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc(PlayerHue, 4, DARKSOULS.exe)
registersymbol(PlayerHue)

PlayerHue:
  dd (float)0

aobscanmodule(Present, DARKSOULS.exe, 8b 44 24 04 53 56 57 8b 78 10 8b f1)
registersymbol(Present)
alloc(PresentHook, 0x1000, DARKSOULS.exe)
registersymbol(PresentHook)

Present:
  jmp PresentHook

PresentHook:
{$ccode}
extern char* WorldChrMan;
extern char* myoffset(void* address, int offset);
extern float PlayerHue;

char* ptr = WorldChrMan;
ptr = myoffset(ptr, 0x3c);      // get PlayerIns
ptr = myoffset(ptr, 0x60c);     // get FgModel
ptr = myoffset(ptr, 0x8);       // get FrpgFgTextureIns
if (!ptr) return;

float* RGB = (float*)(ptr + 0x30);

if (PlayerHue &lt; 1.0)
{
    RGB[0] = 1.0;
    RGB[1] = PlayerHue;
    RGB[2] = 0.0;
}
else if (PlayerHue &lt; 2.0)
{
    RGB[0] = 1.0 - (PlayerHue - 1.0);
    RGB[1] = 1.0;
    RGB[2] = 0.0;
}
else if (PlayerHue &lt; 3.0)
{
    RGB[0] = 0.0;
    RGB[1] = 1.0;
    RGB[2] = PlayerHue - 2.0;
}
else if (PlayerHue &lt; 4.0)
{
    RGB[0] = 0.0;
    RGB[1] = 1.0 - (PlayerHue - 3.0);
    RGB[2] = 1.0;
}
else if (PlayerHue &lt; 5.0)
{
    RGB[0] = PlayerHue - 4.0;
    RGB[1] = 0.0;
    RGB[2] = 1.0;
}
else if (PlayerHue &lt; 6.0)
{
    RGB[0] = 1.0;
    RGB[1] = 0.0;
    RGB[2] = 1.0 - (PlayerHue - 5.0);
}

PlayerHue += 0.02;
if (PlayerHue &gt; 6.0)
{
    PlayerHue -= 6.0;
}
{$asm}

  mov eax, [esp+4]
  push ebx
  jmp Present+5


[DISABLE]

dealloc(PlayerHue)
unregistersymbol(PlayerHue)

Present:
  db 8b 44 24 04 53

unregistersymbol(Present)
dealloc(PresentHook)
unregistersymbol(PresentHook)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Immersive health display"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(MoveMapStepAOB, DARKSOULS.exe, f3 0f 7e 86 a0 00 00 00 66 0f d6 44 24 2c)
label(MoveMapStep)
registersymbol(MoveMapStep)
alloc(MoveMapStepHook, 0x1000, DARKSOULS.exe)
registersymbol(MoveMapStepHook)

MoveMapStepAOB-14:
MoveMapStep:
  jmp MoveMapStepHook
  nop

MoveMapStepHook:
{$ccode}
extern char* WorldChrMan;
extern char* myoffset(void* address, int offset);

char* PlayerIns = myoffset(WorldChrMan, 0x3c);
char* ptr = PlayerIns;
ptr = myoffset(ptr, 0x60c);    // get FgModel
ptr = myoffset(ptr, 0x8);      // get FrpgFgTextureIns
if (!ptr) return;

float* RGB = (float*)(ptr + 0x30);
int health = *(int*)(PlayerIns + 0x2d4);
int maxHealth = *(int*)(PlayerIns + 0x2d8);

float scale = 0.6;
if (health &lt;= 0)
{
    RGB[0] = 2.0 * scale;
    RGB[1] = 0.0;
    RGB[2] = 0.0;
}
else
{
    if (health &gt; maxHealth)
    {
        health = maxHealth;
    }
    float ratio = (float)health / (float)maxHealth;
    ratio = ratio * ratio * (3.0 - 2.0 * ratio); // ease in/out a little
    if (ratio &gt; 0.5)
    {
        RGB[0] = 2.0 * (1.0 - ratio) * scale;
        RGB[1] = scale;
        RGB[2] = 0.0;
    }
    else
    {
        RGB[0] = scale;
        RGB[1] = ratio * 2.0 * scale;
        RGB[2] = 0.0;
    }
}

{$asm}
  push ebp
  mov ebp, esp
  and esp, fffffff0
  jmp MoveMapStep+6


[DISABLE]

MoveMapStep:
  db 55 8b ec 83 e4 f0

unregistersymbol(MoveMapStep)
dealloc(MoveMapStepHook)
unregistersymbol(MoveMapStepHook)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Empathy"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc(ApplyDamage, 0x1000, DARKSOULS.exe)
registersymbol(ApplyDamage)

ApplyDamage:
{$ccode stack=ESP}
char* entity = *(char**)(stack + 4);
int amount = *(int*)(stack + 8);

extern char* myoffset(void* address, long long offset);
extern float EmpathyMultiplier;
extern char* WorldChrMan;
char* PlayerIns = myoffset(WorldChrMan, 0x3c);

if (PlayerIns &amp;&amp; entity != PlayerIns)
{
    float multiplier = EmpathyMultiplier; // need to do this because of compiler bug
    int scaledAmount = (int)(amount * multiplier);
    int* playerHealth = (int*)(PlayerIns + 0x2d4);
    *playerHealth -= scaledAmount;
}

{$asm}
  ret

aobscanmodule(ChangeHealth, DARKSOULS.exe, 85 ff 7d 1a f6 86 ff 01 00 00 04)
registersymbol(ChangeHealth)
alloc(ChangeHealthHook, 0x1000, DARKSOULS.exe)
registersymbol(ChangeHealthHook)

ChangeHealth:
  jmp ChangeHealthHook

ChangeHealthHook:
{$ccode arg1=ESI arg2=EDI}
char* entity = (char*)arg1;
int amount = (int)arg2;

extern void ApplyDamage(void* entity, int amount);

int entityId = *(int*)(entity + 0x208);
// ignore the Four Kings besides the shared health entity
if (entityId &gt;= 1600801 &amp;&amp; entityId &lt;= 1600804) return;

if (amount &lt; 0)
{
    ApplyDamage(entity, -amount);
}

{$asm}
  test edi, edi
  jge ChangeHealth+1e
  test byte ptr [esi+1ff], 4
  jmp ChangeHealth+b


aobscanmodule(ZeroHealth, DARKSOULS.exe, 51 53 8b 5c 24 0c 56 57 6a 00 53)
registersymbol(ZeroHealth)
alloc(ZeroHealthHook, 0x1000, DARKSOULS.exe)
registersymbol(ZeroHealthHook)

ZeroHealth:
  jmp ZeroHealthHook
  nop

ZeroHealthHook:
{$ccode stack=ESP}
char* entity = *(char**)(stack + 4);

extern void ApplyDamage(void* entity, int amount);

int health = *(int*)(entity + 0x2d4);
ApplyDamage(entity, health);

{$asm}
  push ecx
  push ebx
  mov ebx, [esp+c]
  jmp ZeroHealth+5

aobscanmodule(ScriptedKill, DARKSOULS.exe, 02 db 02 db 32 9e 00 02 00 00)
registersymbol(ScriptedKill)
alloc(ScriptedKillHook, 0x1000, DARKSOULS.exe)
registersymbol(ScriptedKillHook)

ScriptedKill:
  jmp ScriptedKillHook
  nop
  nop
  nop
  nop
  nop

ScriptedKillHook:
{$ccode arg1=ESI arg2=EBX}
char* entity = (char*)arg1;
int noReward = arg2 &amp; 1;

extern void ApplyDamage(void* entity, int amount);

int entityId = *(int*)(entity + 0x208);
// only include Ceaseless Discharge scripted kill
if (entityId != 1410600) return;

if (!noReward)
{
    int health = *(int*)(entity + 0x2d4);
    ApplyDamage(entity, health);
}

{$asm}
  add bl, bl
  add bl, bl
  xor bl, byte ptr [esi+200]
  jmp ScriptedKill+a


aobscanmodule(SpEffectDamage, DARKSOULS.exe, 8b 87 d4 02 00 00 03 c3 50 57)
registersymbol(SpEffectDamage)
alloc(SpEffectDamageHook, 0x1000, DARKSOULS.exe)
registersymbol(SpEffectDamageHook)

SpEffectDamage:
  jmp SpEffectDamageHook
  nop

SpEffectDamageHook:
{$ccode arg1=EDI arg2=EBX}
char* entity = (char*)arg1;
int amount = (int)arg2;

extern void ApplyDamage(void* entity, int amount);

int entityId = *(int*)(entity + 0x208);

// second bell gargoyle, Oscar
if (entityId == 1010801 || entityId == 6023)
{
    // they get their initial hp reduced by an speffect
    int health = *(int*)(entity + 0x2d4);
    int maxHealth = *(int*)(entity + 0x2d8);
    if (health == maxHealth) return;
}

if (amount &lt; 0)
{
    ApplyDamage(entity, -amount);
}
{$asm}
  mov eax, [edi+2d4]
  jmp SpEffectDamage+6


[DISABLE]

dealloc(ApplyDamage)
unregistersymbol(ApplyDamage)

ChangeHealth:
  db 85 ff 7d 1a f6 86 ff 01 00 00 04

unregistersymbol(ChangeHealth)
dealloc(ChangeHealthHook)
unregistersymbol(ChangeHealthHook)

ZeroHealth:
  db 51 53 8b 5c 24 0c

unregistersymbol(ZeroHealth)
dealloc(ZeroHealthHook)
unregistersymbol(ZeroHealthHook)

ScriptedKill:
  db 02 db 02 db 32 9e 00 02 00 00

unregistersymbol(ScriptedKill)
dealloc(ScriptedKillHook)
unregistersymbol(ScriptedKillHook)

SpEffectDamage:
  db 8b 87 d4 02 00 00

unregistersymbol(SpEffectDamage)
dealloc(SpEffectDamageHook)
unregistersymbol(SpEffectDamageHook)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>7</ID>
              <Description>"Damage multiplier"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>EmpathyMultiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
